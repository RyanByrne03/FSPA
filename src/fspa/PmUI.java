package fspa;

import javax.swing.DefaultListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JOptionPane;
import java.util.List;
import fspa.FaceAuth;
import java.io.File;

/**
 *
 * @author RyanByrne
 */
public class PmUI extends javax.swing.JFrame {

    private DefaultListModel<String> listModel; // Model for jList1

    /**
     * Creates new form PmUI
     */
    public PmUI() {
        // Check if face data exists
        File faceDataDir = new File("facedata");
        if (!faceDataDir.exists() || faceDataDir.listFiles() == null || faceDataDir.listFiles().length == 0) {
            JOptionPane.showMessageDialog(null, "No face data found. Please look at the camera to enroll.");
            FaceAuth.enrollUser();
        } else {
            boolean verified = FaceAuth.authenticateUser();
            if (!verified) {
                JOptionPane.showMessageDialog(null, "Face not recognized. Access denied.");
                System.exit(0);
            }
        }
        initComponents();
        listModel = new DefaultListModel<>();
        jList1.setModel(listModel); // Attach the model to jList1
        refreshPasswordList(); //Refresh the password list so that all names are visible straight away

        passwordEnter.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateStrengthBar();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateStrengthBar();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateStrengthBar();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        passwordName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        passwordEnter = new javax.swing.JTextField();
        saveBttn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        passwordSearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        searchBttn = new javax.swing.JButton();
        strengthBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Password Name");

        jLabel2.setText("Enter your password");

        saveBttn.setText("Save Password");
        saveBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBttnActionPerformed(evt);
            }
        });

        jList1.setModel(jList1.getModel());
        jScrollPane1.setViewportView(jList1);

        jLabel3.setText("Enter the name of the password you want to retrieve or delete");

        searchBttn.setText("Search");
        searchBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBttnActionPerformed(evt);
            }
        });

        jLabel4.setText("Password Strength");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(passwordName, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(strengthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchBttn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteButton)))))
                .addGap(0, 224, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordEnter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(strengthBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveBttn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBttn)
                    .addComponent(deleteButton))
                .addContainerGap(183, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBttnActionPerformed
        // TODO add your handling code here:
        String name = passwordName.getText().trim();
        String password = passwordEnter.getText().trim();
        //Give a warning telling the user that they can't leave the name and password fields blank
        if (name.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name and password cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Give a message telling the user that their password is weak according to the suggestions
        String suggestions = checkPasswordStrength(password);
        if (!suggestions.equals("Password is strong!")) {
            JOptionPane.showMessageDialog(this, "Suggestions:\n" + suggestions, "Weak Password", JOptionPane.WARNING_MESSAGE);
        }
        //Give a warning telling the user that the password they entered has appeared in a data breach
        if (PasswordManager.isPasswordPwned(password)) {
            JOptionPane.showMessageDialog(this, "WARNING: This password has been found in a data breach.\nPlease consider changing it!", "Pwned Password", JOptionPane.ERROR_MESSAGE);
        }
        //Give the user a warning telling them that they've overused their password
        int usageCount = PasswordManager.countPasswordUsage(password);
        if (usageCount > 0) {
            JOptionPane.showMessageDialog(this, "WARNING: This password has been reused " + usageCount + " times!", "Password Reuse Warning", JOptionPane.WARNING_MESSAGE);
        }

        PasswordManager.savePassword(name, password);

        refreshPasswordList();

        passwordName.setText("");
        passwordEnter.setText("");
        strengthBar.setValue(0);
        strengthBar.setString("");

        JOptionPane.showMessageDialog(this, "Password saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_saveBttnActionPerformed

    private String checkPasswordStrength(String password) {
        StringBuilder suggestions = new StringBuilder();

        if (password.length() < 8) {
            suggestions.append("• At least 8 characters.\n");
        }
        if (!password.matches(".*[A-Z].*")) {
            suggestions.append("• Add an uppercase letter.\n");
        }
        if (!password.matches(".*[0-9].*")) {
            suggestions.append("• Add a number.\n");
        }
        if (!password.matches(".*[!@#$%^&*()_+=<>?/{}~\\-].*")) {
            suggestions.append("• Add a special character.\n");
        }

        return suggestions.length() == 0 ? "Password is strong!" : suggestions.toString();
    }

    private void updateStrengthBar() {
        String password = passwordEnter.getText();
        int strength = calculatePasswordStrength(password);
        strengthBar.setValue(strength);

        if (strength < 40) {
            strengthBar.setString("Weak");
            strengthBar.setForeground(java.awt.Color.RED);
        } else if (strength < 70) {
            strengthBar.setString("Medium");
            strengthBar.setForeground(java.awt.Color.ORANGE);
        } else {
            strengthBar.setString("Strong");
            strengthBar.setForeground(java.awt.Color.GREEN.darker());
        }
    }

    private int calculatePasswordStrength(String password) {
        int strength = 0;

        if (password.length() >= 8) {
            strength += 25;
        }
        if (password.matches(".*[A-Z].*")) {
            strength += 20;
        }
        if (password.matches(".*[0-9].*")) {
            strength += 20;
        }
        if (password.matches(".*[!@#$%^&*()_+=<>?/{}~\\-].*")) {
            strength += 20;
        }
        if (password.length() >= 12) {
            strength += 15;
        }

        return Math.min(strength, 100);
    }
    private void searchBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBttnActionPerformed
        // TODO add your handling code here:
        String searchName = passwordSearch.getText().trim();

        if (searchName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a name to search.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String result = PasswordManager.searchPassword(searchName);
            JOptionPane.showMessageDialog(this, "Result: " + result, "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchBttnActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String name = passwordSearch.getText().trim();

        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a name to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the password for \"" + name + "\"?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean deleted = PasswordManager.deletePassword(name);
            if (deleted) {
                JOptionPane.showMessageDialog(this, "Password deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                refreshPasswordList();  // Refresh the JList
                passwordSearch.setText("");  // Clear the input field
            } else {
                JOptionPane.showMessageDialog(this, "No password found for that name.", "Not Found", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    private void refreshPasswordList() {
        List<String> names = PasswordManager.getAllNames();  // get only the names
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (String name : names) {
            listModel.addElement(name);
        }

        jList1.setModel(listModel);  // update the JList with just the names
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PmUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField passwordEnter;
    private javax.swing.JTextField passwordName;
    private javax.swing.JTextField passwordSearch;
    private javax.swing.JButton saveBttn;
    private javax.swing.JButton searchBttn;
    private javax.swing.JProgressBar strengthBar;
    // End of variables declaration//GEN-END:variables
}
